{"version":3,"file":"static/js/745.15b04ea5.chunk.js","mappings":"4MAKA,MA8DA,EArCsBA,MAElBC,EAAAA,EAAAA,YAAU,KAENC,EAAAA,EAAKC,cAAc,GACpB,KAGCC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sCAAqCF,SAAC,2DAErDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,UAASF,SAAA,CAAC,gMAErBF,EAAAA,EAAAA,MAAA,MAAII,UAAU,+BAA8BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACH,wlBAILC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBF,SA9C7C,8TAgDIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBF,SApC7C,4SAsCIC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,oBAAmBF,SAAC,0BACjCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,+BAA8BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2DACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0DACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uECLxB,EArCiBG,MACfR,EAAAA,EAAAA,YAAU,KAERC,EAAAA,EAAKC,cAAc,GAClB,KAGDC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sCAAqCF,SAAC,mBACrDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,UAASF,SAAA,CAAC,yMAGvBC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,4BACtCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UACpCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBF,SA5BrC,wUA+BFC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,kBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,0BAAyBF,SAAA,EACrCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6DACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6CACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wDAGNC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,gBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,+BAA8BF,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2DACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uDACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qECSd,EAnCqBI,MACnBT,EAAAA,EAAAA,YAAU,KAERC,EAAAA,EAAKC,cAAc,GAClB,KAGDC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sCAAqCF,SAAC,uBACrDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,UAASF,SAAA,CAAC,4IAGvBC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,gCACtCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UACpCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBF,SAhCrC,gdAmCFC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,kBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,0BAAyBF,SAAA,EACrCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uFAGNC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,gBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,+BAA8BF,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uFCiCd,EA/DsBK,MAElBV,EAAAA,EAAAA,YAAU,KAENC,EAAAA,EAAKC,cAAc,GACpB,IAoBH,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sCAAqCF,SAAC,wBACrDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,UAASF,SAAA,CAAC,mIAGrBC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,iCACtCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBF,SAjD/C,mhBAoDMC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,kBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,0BAAyBF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oIACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mHACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qIAGRC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,gBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,+BAA8BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iFAYb,ECxBX,EApCuBM,MACnBX,EAAAA,EAAAA,YAAU,KAENC,EAAAA,EAAKC,cAAc,GACpB,KAGCC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sCAAqCF,SAAC,yBACrDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,UAASF,SAAA,CAAC,mJAGrBC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,kCACtCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBF,SA7B/C,saAgCMC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,kBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,0BAAyBF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6FACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8FACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iFAGRC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,gBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,+BAA8BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uFCOxB,EAjDoBO,MAEhBZ,EAAAA,EAAAA,YAAU,KAENC,EAAAA,EAAKC,cAAc,GACpB,KAGCC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sCAAqCF,SAAC,yBACrDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,UAASF,SAAA,CAAC,kJAErBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,cACJ,iDAENC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,+BACtCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeF,SAAA,gEAKnCC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,kBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,0BAAyBF,SAAA,EACnCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,YAAQC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAACC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,qBAA2B,sBAAkBC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAACC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,YAAwB,gBAC3KC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uGAGRC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,gBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,+BAA8BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4GACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2DACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kFAIZC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBF,UAEnCC,EAAAA,EAAAA,KAAA,OACIO,IAAI,kCACJC,IAAI,qBACJC,QAAQ,eCD5B,EAnC0BC,MACtBhB,EAAAA,EAAAA,YAAU,KAENC,EAAAA,EAAKC,cAAc,GACpB,KAGCC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sCAAqCF,SAAC,6BACrDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,UAASF,SAAA,CAAC,uKAGrBC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,sCACtCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBF,SAtB/C,qNAyBMC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,kBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,0BAAyBF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6FAGRC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,gBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,+BAA8BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uFCwCxB,EA/D0BY,KACtB,MAAMC,GAAkBC,EAAAA,EAAAA,QAAO,MAuB/B,OArBAnB,EAAAA,EAAAA,YAAU,KAENC,EAAAA,EAAKC,eAGL,MAAMkB,EAAiB,IAAIC,gBAAeC,IACtC,IAAK,MAAMC,KAASD,EAChBE,QAAQC,IAAI,wBAAyBF,EAAMG,YAAYC,MAAOJ,EAAMG,YAAYE,OACpF,IAQJ,OALIV,EAAgBW,SAChBT,EAAeU,QAAQZ,EAAgBW,SAIpC,KACHT,EAAeW,YAAY,CAC9B,GACF,KAGC5B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sCAAqCF,SAAC,6BACrDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,UAASF,SAAA,CAAC,6JAGrBC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,sCACtCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBF,SA7C/C,8ZAgDMC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,kBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,0BAAyBF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0GAGRC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,gBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,+BAA8BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kFAYb,ECUX,EAlEe2B,KACX,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,sEAE/CnC,EAAAA,EAAAA,YAAU,KAENC,EAAAA,EAAKC,cAAc,GACpB,IAcH,OACIC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sCAAqCF,SAAC,iBACrDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,UAASF,SAAA,CAAC,+GAGrBC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,0BACtCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBF,SA5C/C,2eA+CMC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,kBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,0BAAyBF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wDACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0GACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0GACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+CAGRC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,gBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,+BAA8BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+FACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mFAIZC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBF,SAAC,yBACxCF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,yBAAwBF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,SACI8B,KAAK,OACL7B,UAAU,kCACV8B,MAAOJ,EACPK,SAAWC,GAAML,EAAeK,EAAEC,OAAOH,UAE7C/B,EAAAA,EAAAA,KAAA,UACIC,UAAU,2CACVkC,QAjDcC,KAE1B,MAAMC,EAAM,IAAIC,IAAIX,GAGpBU,EAAIE,aAAaC,IAAI,SAAU,UAC/BH,EAAII,KAAO,cAGXvB,QAAQC,IAAI,gBAAiBkB,EAAIK,KAAK,EAwCK3C,SAClC,oBAIN,ECjBX,EArDqB4C,MAWjBjD,EAAAA,EAAAA,YAAU,KAENC,EAAAA,EAAKC,cAAc,GACpB,KAGCC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sCAAqCF,SAAC,uBACrDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,UAASF,SAAA,CAAC,oHAGrBC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,gCACtCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UAClCC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBF,SAhC/C,8MAmCMC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,kBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,0BAAyBF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mGAGRC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,yBAAwBF,SAAC,gBACtCF,EAAAA,EAAAA,MAAA,MAAII,UAAU,+BAA8BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yFCiExB,EApGmB6C,IAAwC,IAAvC,SAAEC,EAAQ,OAAEC,EAAM,YAAEC,GAAaH,EACjD,MAAMI,GAAWC,EAAAA,EAAAA,MAajB,IAAIC,EAEJ,QAbAxD,EAAAA,EAAAA,YAAU,KACNyD,SAASC,eAAe,YAAYC,SAAS,CAAEC,IAAK,EAAGC,KAAM,EAAGC,SAAU,WAE3D,OAAXV,GAEAE,EAAS,YACb,GACD,CAACF,EAAQE,IAEZF,EAASW,SAASX,GAIVA,GACJ,KAAK,EACDI,GACIlD,EAAAA,EAAAA,KAACP,EAAa,IAElB,MACJ,KAAK,EACDyD,GACIlD,EAAAA,EAAAA,KAACE,EAAQ,IAEb,MACJ,KAAK,EACDgD,GACIlD,EAAAA,EAAAA,KAACG,EAAY,IAEjB,MACJ,KAAK,EACD+C,GACIlD,EAAAA,EAAAA,KAACK,EAAc,IAEnB,MACJ,KAAK,EACD6C,GACIlD,EAAAA,EAAAA,KAACU,EAAiB,IAEtB,MACJ,KAAK,EACDwC,GACIlD,EAAAA,EAAAA,KAACW,EAAiB,IAEtB,MACJ,KAAK,EACDuC,GACIlD,EAAAA,EAAAA,KAAC0B,EAAM,IAEX,MACJ,KAAK,EACDwB,GACIlD,EAAAA,EAAAA,KAAC2C,EAAY,IAEjB,MACJ,KAAK,EACDO,GACIlD,EAAAA,EAAAA,KAAC0D,EAAa,IAElB,MACJ,KAAK,EACDR,GACIlD,EAAAA,EAAAA,KAACM,EAAW,IAEhB,MACJ,QACI4C,GAEIrD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6BACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2DAKnB,OACIF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,2GAA0GF,SAAA,CACpHmD,GACDlD,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAAA,OAAKI,UAAU,gCAA+BF,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,OAAKC,UAAS,sBAAA0D,OAAwBb,GAAU,EAAI,WAAa,IAAMX,QAAUA,KAC7EY,EAAYD,EAAS,GACrBE,EAAS,eAAe,EAE3BjD,SAAC,UACFC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAqBkC,QAASA,IAAMa,EAAS,aAAajD,SAAC,kBAC1EC,EAAAA,EAAAA,KAAA,OAAKC,UAAS,sBAAA0D,OAAwBb,GAAU,EAAI,WAAa,IAAMX,QAAUA,KAC7EY,EAAYD,EAAS,GACrBE,EAAS,eAAe,EAE3BjD,SAAC,cAEJ,C","sources":["api_details/WebStorageAPI.jsx","api_details/FetchAPI.jsx","api_details/ClipboardAPI.jsx","api_details/FullScreenAPI.jsx","api_details/GeolocationAPI.jsx","api_details/LazyLoadAPI.jsx","api_details/PageVisibilityAPI.jsx","api_details/ResizeObserverAPI.jsx","api_details/URLAPI.jsx","api_details/VibrationAPI.jsx","components/APIDetails.jsx"],"sourcesContent":["// APIDetails.jsx\nimport React, { useEffect } from 'react';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nconst code_1 = `// Save data to sessionStorage\nsessionStorage.setItem('key', 'value');\n\n// Get saved data from sessionStorage\ncont data = sessionStorage.getItem('key');\n\n// Remove saved data from sessionStorage\nsessionStorage.removeItem('key');\n\n// Remove all saved data from sessionStorage\nsessionStorage.clear();\n`;\n\nconst code_2 = `// Save data to localStorage\nlocalStorage.setItem('key', 'value');\n\n// Get saved data from localStorage\ncont data = localStorage.getItem('key');\n\n// Remove saved data from localStorage\nlocalStorage.removeItem('key');\n\n// Remove all saved data from localStorage\nlocalStorage.clear();`;\n\nconst WebStorageAPI = () => {\n\n    useEffect(() => {\n        // Trigger highlighting on component mount\n        hljs.highlightAll();\n    }, []);\n\n    return (\n        <>\n            <div className=\"text-2xl font-bold text-center py-2\">The Web Storage APIs: LocalStorage and SessionStorage\n            </div>\n            <div className='text-lg'>\n                The Web Storage API has been designed to provide mechanisms by which browsers can store key/value pairs more intuitively than using cookies. There are two web storage APIs you should know:\n                <ul className=\"list-disc pl-10 sm:pl-5 my-2\">\n                    <li>The sessionStorage</li>\n                    <li>The localStorage</li>\n                </ul>\n                You can use the session storage API when you need to save something for the page session’s duration (i.e., until the browser or the tab is closed). This means that everything will be available even if you reload the page. On the contrary, if you close your browser or the tab, the session storage will be flushed, and the data will be lost.\n\n                On the other hand, local storage is also used to save something but in a persistent way. This means that the local storage is not flushed when the browser is closed and reopened. The only way to clear the localStorage is to call localStorage.clear().\n                <pre className=\"my-4 border-2 rounded\">\n                    <code className=\"language-javascript\">{code_1}</code>\n                </pre>\n                <pre className=\"my-4 border-2 rounded\">\n                    <code className=\"language-javascript\">{code_2}</code>\n                </pre>\n                <p className=\"text-md font-bold\">Real Work Use Cases:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5 my-2\">\n                    <li>Saving authentication tokens once a user is logged in</li>\n                    <li>Saving the selected locale for multilingual websites</li>\n                    <li>Storing the number of page views for the current session</li>\n                </ul>\n            </div>\n        </>\n    );\n};\n\nexport default WebStorageAPI;\n","import React, { useEffect } from 'react';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nconst code = `fetch('https://api.example.com/data')\n  .then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then(data => {\n    console.log('Data received:', data);\n  })\n  .catch(error => {\n    console.error('Fetch error:', error);\n  });`;\n\nconst FetchAPI = () => {\n  useEffect(() => {\n    // Trigger highlighting on component mount\n    hljs.highlightAll();\n  }, []);\n\n  return (\n    <>\n      <div className=\"text-2xl font-bold text-center py-2\">The Fetch API</div>\n      <div className='text-lg'>\n        The Fetch API provides a simple interface for fetching resources (like data) across the network. It is a modern replacement for XMLHttpRequest and provides a more powerful and flexible feature set.\n\n        <p className=\"text-md font-bold my-2\">Sample Fetch API Code:</p>\n        <pre className=\"my-4 border-2 rounded\">\n          <code className=\"language-javascript\">{code}</code>\n        </pre>\n\n        <p className=\"text-md font-bold my-2\">Explanation:</p>\n        <ul className=\"list-disc pl-10 sm:pl-5\">\n          <li>The `fetch` function is used to make a network request.</li>\n          <li>The response is checked for its status using `response.ok`.</li>\n          <li>If the response is successful, the data is extracted using `response.json()`.</li>\n          <li>The data is then logged to the console.</li>\n          <li>Error handling is done using the `catch` block.</li>\n        </ul>\n\n        <p className=\"text-md font-bold my-2\">Use Cases:</p>\n        <ul className=\"list-disc pl-10 sm:pl-5 my-2\">\n          <li>Fetching data from a REST API in a React application.</li>\n          <li>Uploading files to a server using a POST request.</li>\n          <li>Interacting with third-party APIs to get or send data.</li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default FetchAPI;\n","import React, { useEffect } from 'react';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nconst code = `// Copy text to the clipboard\nnavigator.clipboard.writeText('Hello, Clipboard!')\n  .then(() => {\n    console.log('Text copied to clipboard');\n  })\n  .catch(error => {\n    console.error('Clipboard write error:', error);\n  });\n\n// Read text from the clipboard\nnavigator.clipboard.readText()\n  .then(text => {\n    console.log('Text read from clipboard:', text);\n  })\n  .catch(error => {\n    console.error('Clipboard read error:', error);\n  });`;\n\nconst ClipboardAPI = () => {\n  useEffect(() => {\n    // Trigger highlighting on component mount\n    hljs.highlightAll();\n  }, []);\n\n  return (\n    <>\n      <div className=\"text-2xl font-bold text-center py-2\">The Clipboard API</div>\n      <div className='text-lg'>\n        The Clipboard API provides a simple interface for interacting with the clipboard. It allows you to programmatically copy and paste text.\n\n        <p className=\"text-md font-bold my-2\">Sample Clipboard API Code:</p>\n        <pre className=\"my-4 border-2 rounded\">\n          <code className=\"language-javascript\">{code}</code>\n        </pre>\n\n        <p className=\"text-md font-bold my-2\">Explanation:</p>\n        <ul className=\"list-disc pl-10 sm:pl-5\">\n          <li>Use `navigator.clipboard.writeText` to copy text to the clipboard.</li>\n          <li>Use `navigator.clipboard.readText` to read text from the clipboard.</li>\n          <li>Both methods return a promise, allowing you to handle success and error cases.</li>\n        </ul>\n\n        <p className=\"text-md font-bold my-2\">Use Cases:</p>\n        <ul className=\"list-disc pl-10 sm:pl-5 my-2\">\n          <li>Allow users to copy content from your web application with a button click.</li>\n          <li>Implement a \"Copy to Clipboard\" feature for shareable links or codes.</li>\n          <li>Enhance user experience by simplifying text copying and pasting actions.</li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default ClipboardAPI;\n","import React, { useEffect } from 'react';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nconst code = `// Check if fullscreen is supported\nif (document.fullscreenEnabled || document.webkitFullscreenEnabled) {\n  const elementToFullscreen = document.getElementById('elementId');\n\n  // Request fullscreen\n  if (elementToFullscreen) {\n    if (elementToFullscreen.requestFullscreen) {\n      elementToFullscreen.requestFullscreen();\n    } else if (elementToFullscreen.webkitRequestFullscreen) {\n      elementToFullscreen.webkitRequestFullscreen();\n    }\n  }\n} else {\n  console.log('Fullscreen API is not supported');\n}`;\n\nconst FullscreenAPI = () => {\n\n    useEffect(() => {\n        // Trigger highlighting on component mount\n        hljs.highlightAll();\n    }, []);\n\n    const handleFullscreen = () => {\n        // Check if fullscreen is supported\n        if (document.fullscreenEnabled || document.webkitFullscreenEnabled) {\n            const elementToFullscreen = document.getElementById('elementId');\n\n            // Request fullscreen\n            if (elementToFullscreen) {\n                if (elementToFullscreen.requestFullscreen) {\n                    elementToFullscreen.requestFullscreen();\n                } else if (elementToFullscreen.webkitRequestFullscreen) {\n                    elementToFullscreen.webkitRequestFullscreen();\n                }\n            }\n        } else {\n            console.log('Fullscreen API is not supported');\n        }\n    };\n\n    return (\n        <>\n            <div className=\"text-2xl font-bold text-center py-2\">The Fullscreen API</div>\n            <div className='text-lg'>\n                The Fullscreen API provides a way to request fullscreen mode for an element, allowing you to create immersive user experiences.\n\n                <p className=\"text-md font-bold my-2\">Sample Fullscreen API Code:</p>\n                <pre className=\"my-4 border-2 rounded\">\n                    <code className=\"language-javascript\">{code}</code>\n                </pre>\n\n                <p className=\"text-md font-bold my-2\">Explanation:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5\">\n                    <li>Check if the Fullscreen API is supported using the `document.fullscreenEnabled` and `document.webkitFullscreenEnabled` checks.</li>\n                    <li>Identify the element you want to make fullscreen by its ID (replace 'elementId' with your actual element ID).</li>\n                    <li>Request fullscreen using the appropriate method based on browser support (`requestFullscreen` or `webkitRequestFullscreen`).</li>\n                </ul>\n\n                <p className=\"text-md font-bold my-2\">Use Cases:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5 my-2\">\n                    <li>Create fullscreen multimedia experiences, such as videos or image galleries.</li>\n                    <li>Enhance presentations or slideshows with a fullscreen display of content.</li>\n                    <li>Improve the readability of content by maximizing screen real estate.</li>\n                </ul>\n            </div>\n\n            {/* <div className=\"flex items-center my-4\">\n                <button\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n                    onClick={handleFullscreen}\n                >\n                    Request Fullscreen\n                </button>\n            </div> */}\n        </>\n    );\n};\n\nexport default FullscreenAPI;\n","import React, { useEffect } from 'react';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nconst code = `// Get user's current location\nif (navigator.geolocation) {\n  navigator.geolocation.getCurrentPosition(\n    position => {\n      const { latitude, longitude } = position.coords;\n      console.log('Current location:', { latitude, longitude });\n    },\n    error => {\n      console.error('Geolocation error:', error);\n    }\n  );\n} else {\n  console.error('Geolocation is not supported by this browser.');\n}`;\n\nconst GeolocationAPI = () => {\n    useEffect(() => {\n        // Trigger highlighting on component mount\n        hljs.highlightAll();\n    }, []);\n\n    return (\n        <>\n            <div className=\"text-2xl font-bold text-center py-2\">The Geolocation API</div>\n            <div className='text-lg'>\n                The Geolocation API provides a way to retrieve the geographic location of a user's device. It allows you to access the user's current location.\n\n                <p className=\"text-md font-bold my-2\">Sample Geolocation API Code:</p>\n                <pre className=\"my-4 border-2 rounded\">\n                    <code className=\"language-javascript\">{code}</code>\n                </pre>\n\n                <p className=\"text-md font-bold my-2\">Explanation:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5\">\n                    <li>Check if the Geolocation API is supported by the browser using `navigator.geolocation`.</li>\n                    <li>Use `navigator.geolocation.getCurrentPosition` to get the current position.</li>\n                    <li>The success callback receives a `position` object containing the latitude and longitude.</li>\n                    <li>The error callback handles cases where the location cannot be retrieved.</li>\n                </ul>\n\n                <p className=\"text-md font-bold my-2\">Use Cases:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5 my-2\">\n                    <li>Implement location-based features in your web application.</li>\n                    <li>Provide personalized content based on the user's location.</li>\n                    <li>Create location-aware experiences, such as maps or weather applications.</li>\n                </ul>\n            </div>\n        </>\n    );\n};\n\nexport default GeolocationAPI;\n","import React, { useEffect } from 'react';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nconst code_1 = ``;\n\nconst LazyLoadAPI = () => {\n\n    useEffect(() => {\n        // Trigger highlighting on component mount\n        hljs.highlightAll();\n    }, []);\n\n    return (\n        <>\n            <div className=\"text-2xl font-bold text-center py-2\">Lazy Loading Images</div>\n            <div className='text-lg'>\n                Lazy loading is a technique that defers the loading of non-critical resources, such as images, until they are needed. In HTML, you can use the\n                <pre className=\"my-4 border-2 rounded\">\n                    <code>loading</code>\n                </pre> attribute to enable lazy loading for images.\n\n                <p className=\"text-md font-bold my-2\">Sample Lazy Loading Code:</p>\n                <pre className=\"my-4 border-2 rounded\">\n                    <code className=\"language-html\">\n                        {`<img src=\"image.jpg\" alt=\"Description\" loading=\"lazy\" />`}\n                    </code>\n                </pre>\n\n                <p className=\"text-md font-bold my-2\">Explanation:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5\">\n                    <li>Add the <pre className=\"my-4 border-2 rounded\"><code>loading=\"lazy\"</code></pre> attribute to the <pre className=\"my-4 border-2 rounded\"><code>&lt;img&gt;</code></pre> element.</li>\n                    <li>Lazy loading allows the browser to decide when to load the image based on the user's viewport.</li>\n                </ul>\n\n                <p className=\"text-md font-bold my-2\">Use Cases:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5 my-2\">\n                    <li>Improve page load performance by loading images only when they are about to come into the user's view.</li>\n                    <li>Optimize bandwidth usage by loading images on demand.</li>\n                    <li>Enhance the user experience by speeding up the initial page load time.</li>\n                </ul>\n            </div>\n\n            <div className=\"flex items-center my-4\">\n                {/* You can include an example lazy-loaded image here */}\n                <img\n                    src=\"https://placekitten.com/400/300\"  // Replace with your image URL\n                    alt=\"Lazy Loaded Kitten\"\n                    loading=\"lazy\"\n                />\n            </div>\n        </>\n    );\n};\n\nexport default LazyLoadAPI;\n","import React, { useEffect } from 'react';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nconst code = `document.addEventListener('visibilitychange', () => {\n  if (document.visibilityState === 'visible') {\n    console.log('Page is now visible');\n  } else {\n    console.log('Page is now hidden');\n  }\n});`;\n\nconst PageVisibilityAPI = () => {\n    useEffect(() => {\n        // Trigger highlighting on component mount\n        hljs.highlightAll();\n    }, []);\n\n    return (\n        <>\n            <div className=\"text-2xl font-bold text-center py-2\">The Page Visibility API</div>\n            <div className='text-lg'>\n                The Page Visibility API provides a way to determine whether a page is currently visible or not. It allows you to listen for changes in the page's visibility state.\n\n                <p className=\"text-md font-bold my-2\">Sample Page Visibility API Code:</p>\n                <pre className=\"my-4 border-2 rounded\">\n                    <code className=\"language-javascript\">{code}</code>\n                </pre>\n\n                <p className=\"text-md font-bold my-2\">Explanation:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5\">\n                    <li>Use `document.addEventListener` to listen for the `visibilitychange` event.</li>\n                    <li>The event is triggered whenever the visibility state of the page changes.</li>\n                    <li>Check `document.visibilityState` to determine whether the page is visible or hidden.</li>\n                </ul>\n\n                <p className=\"text-md font-bold my-2\">Use Cases:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5 my-2\">\n                    <li>Pause or adjust resource-intensive tasks when the page is not visible.</li>\n                    <li>Track user engagement metrics by monitoring page visibility changes.</li>\n                    <li>Implement features that depend on whether the page is currently visible.</li>\n                </ul>\n            </div>\n        </>\n    );\n};\n\nexport default PageVisibilityAPI;\n","import React, { useEffect, useRef } from 'react';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nconst code = `const targetElement = document.getElementById('resizeTarget');\n\nconst resizeObserver = new ResizeObserver(entries => {\n  for (const entry of entries) {\n    console.log('Element size changed:', entry.contentRect.width, entry.contentRect.height);\n  }\n});\n\nresizeObserver.observe(targetElement);\n\n// Don't forget to disconnect the observer when it's no longer needed\n// resizeObserver.disconnect();`;\n\nconst ResizeObserverAPI = () => {\n    const resizeTargetRef = useRef(null);\n\n    useEffect(() => {\n        // Trigger highlighting on component mount\n        hljs.highlightAll();\n\n        // Create a Resize Observer and observe the target element\n        const resizeObserver = new ResizeObserver(entries => {\n            for (const entry of entries) {\n                console.log('Element size changed:', entry.contentRect.width, entry.contentRect.height);\n            }\n        });\n\n        if (resizeTargetRef.current) {\n            resizeObserver.observe(resizeTargetRef.current);\n        }\n\n        // Don't forget to disconnect the observer when it's no longer needed\n        return () => {\n            resizeObserver.disconnect();\n        };\n    }, []);\n\n    return (\n        <>\n            <div className=\"text-2xl font-bold text-center py-2\">The Resize Observer API</div>\n            <div className='text-lg'>\n                The Resize Observer API provides a way to observe changes to the size of an element. It allows you to react to changes in the dimensions of DOM elements.\n\n                <p className=\"text-md font-bold my-2\">Sample Resize Observer API Code:</p>\n                <pre className=\"my-4 border-2 rounded\">\n                    <code className=\"language-javascript\">{code}</code>\n                </pre>\n\n                <p className=\"text-md font-bold my-2\">Explanation:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5\">\n                    <li>Create a `ResizeObserver` instance by passing a callback function.</li>\n                    <li>Use `resizeObserver.observe` to start observing the target element.</li>\n                    <li>The callback function is called whenever the observed element's size changes.</li>\n                    <li>Remember to disconnect the observer when it's no longer needed using `resizeObserver.disconnect`.</li>\n                </ul>\n\n                <p className=\"text-md font-bold my-2\">Use Cases:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5 my-2\">\n                    <li>Implement responsive designs by adjusting layout based on element size changes.</li>\n                    <li>Optimize performance by adapting UI components to varying screen sizes.</li>\n                    <li>Handle dynamic content that may affect the size of specific elements.</li>\n                </ul>\n            </div>\n\n            {/* <div\n                id=\"resizeTarget\"\n                ref={resizeTargetRef}\n                className=\"border border-dashed p-4 my-4 text-center\"\n                style={{ width: '300px', height: '150px' }}\n            >\n                Resize this element to see the changes!\n            </div> */}\n        </>\n    );\n};\n\nexport default ResizeObserverAPI;\n","import React, { useEffect, useState } from 'react';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nconst code = `// Create a new URL object\nconst url = new URL('https://www.example.com/path?param1=value1&param2=value2#fragment');\n\n// Access URL components\nconsole.log('Protocol:', url.protocol);\nconsole.log('Host:', url.host);\nconsole.log('Path:', url.pathname);\nconsole.log('Query Parameters:', url.searchParams);\nconsole.log('Hash:', url.hash);\n\n// Modify URL components\nurl.searchParams.set('param3', 'value3');\nurl.hash = 'newFragment';\n\nconsole.log('Modified URL:', url.href);`;\n\nconst URLAPI = () => {\n    const [originalURL, setOriginalURL] = useState('https://www.example.com/path?param1=value1&param2=value2#fragment');\n\n    useEffect(() => {\n        // Trigger highlighting on component mount\n        hljs.highlightAll();\n    }, []);\n\n    const handleURLModification = () => {\n        // Create a new URL object\n        const url = new URL(originalURL);\n\n        // Modify URL components\n        url.searchParams.set('param3', 'value3');\n        url.hash = 'newFragment';\n\n        // Log modified URL\n        console.log('Modified URL:', url.href);\n    };\n\n    return (\n        <>\n            <div className=\"text-2xl font-bold text-center py-2\">The URL API</div>\n            <div className='text-lg'>\n                The URL API provides a way to work with URLs, allowing you to parse, modify, and manipulate URL components.\n\n                <p className=\"text-md font-bold my-2\">Sample URL API Code:</p>\n                <pre className=\"my-4 border-2 rounded\">\n                    <code className=\"language-javascript\">{code}</code>\n                </pre>\n\n                <p className=\"text-md font-bold my-2\">Explanation:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5\">\n                    <li>Create a new `URL` object by passing a URL string.</li>\n                    <li>Access various components of the URL, such as protocol, host, pathname, search parameters, and hash.</li>\n                    <li>Modify URL components using methods like `url.searchParams.set` and direct assignment to `url.hash`.</li>\n                    <li>Log the modified URL using `url.href`.</li>\n                </ul>\n\n                <p className=\"text-md font-bold my-2\">Use Cases:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5 my-2\">\n                    <li>Parse and extract information from URLs in your web application.</li>\n                    <li>Build dynamic URLs by modifying query parameters or fragments based on user interactions.</li>\n                    <li>Manipulate and construct URLs in scenarios like routing and navigation.</li>\n                </ul>\n            </div>\n\n            <div className=\"text-md font-bold my-4\">Modify URL Example:</div>\n            <div className=\"flex items-center my-2\">\n                <input\n                    type=\"text\"\n                    className=\"border border-gray-300 p-2 mr-2\"\n                    value={originalURL}\n                    onChange={(e) => setOriginalURL(e.target.value)}\n                />\n                <button\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n                    onClick={handleURLModification}\n                >\n                    Modify URL\n                </button>\n            </div>\n        </>\n    );\n};\n\nexport default URLAPI;\n","import React, { useEffect } from 'react';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github.css';\n\nconst code = `// Check if the Vibration API is supported\nif ('vibrate' in navigator) {\n  // Vibrate for 200 milliseconds\n  navigator.vibrate(200);\n} else {\n  console.log('Vibration API is not supported');\n}`;\n\nconst VibrationAPI = () => {\n    const handleVibration = () => {\n        // Check if the Vibration API is supported\n        if ('vibrate' in navigator) {\n            // Vibrate for 200 milliseconds\n            navigator.vibrate(200);\n        } else {\n            console.log('Vibration API is not supported');\n        }\n    };\n\n    useEffect(() => {\n        // Trigger highlighting on component mount\n        hljs.highlightAll();\n    }, []);\n\n    return (\n        <>\n            <div className=\"text-2xl font-bold text-center py-2\">The Vibration API</div>\n            <div className='text-lg'>\n                The Vibration API provides a way to trigger device vibrations, allowing you to provide haptic feedback to users.\n\n                <p className=\"text-md font-bold my-2\">Sample Vibration API Code:</p>\n                <pre className=\"my-4 border-2 rounded\">\n                    <code className=\"language-javascript\">{code}</code>\n                </pre>\n\n                <p className=\"text-md font-bold my-2\">Explanation:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5\">\n                    <li>Check if the Vibration API is supported using the `'vibrate' in navigator` check.</li>\n                    <li>Use `navigator.vibrate(duration)` to trigger device vibrations for the specified duration.</li>\n                </ul>\n\n                <p className=\"text-md font-bold my-2\">Use Cases:</p>\n                <ul className=\"list-disc pl-10 sm:pl-5 my-2\">\n                    <li>Provide tactile feedback to users in response to specific events or interactions.</li>\n                    <li>Create a more engaging user experience by incorporating haptic feedback.</li>\n                    <li>Enhance accessibility by using vibrations to convey information or alerts.</li>\n                </ul>\n            </div>\n\n            {/* <div className=\"flex items-center my-4\">\n                <button\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n                    onClick={handleVibration}\n                >\n                    Trigger Vibration\n                </button>\n            </div> */}\n        </>\n    );\n};\n\nexport default VibrationAPI;\n","// APIDetails.jsx\nimport React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport WebStorageAPI from '../api_details/WebStorageAPI';\nimport FetchAPI from '../api_details/FetchAPI';\nimport ClipboardAPI from '../api_details/ClipboardAPI';\nimport FullScreenAPI from '../api_details/FullScreenAPI'\nimport GeolocationAPI from '../api_details/GeolocationAPI';\nimport LazyLoadAPI from '../api_details/LazyLoadAPI';\nimport PageVisibilityAPI from '../api_details/PageVisibilityAPI';\nimport ResizeObserverAPI from '../api_details/ResizeObserverAPI';\nimport URLAPI from '../api_details/URLAPI';\nimport VibrationAPI from '../api_details/VibrationAPI';\n\nconst APIDetails = ({ apiNames, apiKey, handleEvent }) => {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        document.getElementById('main-box').scrollTo({ top: 0, left: 0, behavior: 'smooth' });\n        // Check if myParam is null\n        if (apiKey === null) {\n            // Redirect to a different route\n            navigate('/api_list');\n        }\n    }, [apiKey, navigate]);\n\n    apiKey = parseInt(apiKey)\n\n    let apiContent;\n\n    switch (apiKey) {\n        case 0:\n            apiContent = (\n                <WebStorageAPI />\n            );\n            break;\n        case 1:\n            apiContent = (\n                <FetchAPI />\n            );\n            break;\n        case 2:\n            apiContent = (\n                <ClipboardAPI />\n            );\n            break;\n        case 3:\n            apiContent = (\n                <GeolocationAPI />\n            );\n            break;\n        case 4:\n            apiContent = (\n                <PageVisibilityAPI />\n            );\n            break;\n        case 5:\n            apiContent = (\n                <ResizeObserverAPI />\n            );\n            break;\n        case 6:\n            apiContent = (\n                <URLAPI />\n            );\n            break;\n        case 7:\n            apiContent = (\n                <VibrationAPI />\n            );\n            break;\n        case 8:\n            apiContent = (\n                <FullScreenAPI />\n            );\n            break;\n        case 9:\n            apiContent = (\n                <LazyLoadAPI />\n            );\n            break;\n        default:\n            apiContent = (\n                // Default content when apiKey doesn't match any case\n                <div>\n                    <h2>Details for Unknown API</h2>\n                    <p>No specific details available for the selected API.</p>\n                </div>\n            );\n    }\n\n    return (\n        <div className=\"mx-0 sm:mx-auto max-w-4xl px-4 py-2 sm:px-6 sm:py-4 lg:px-8 lg:py-6 flex-auto mt-4 mb-4 bg-white rounded\">\n            {apiContent}\n            <br></br>\n            <hr></hr>\n            <br></br>\n            <div className=\"flex flex-row justify-between\">\n                <div className={`api_details_button ${apiKey <= 0 ? 'disabled' : ''}`} onClick={(() => {\n                    handleEvent(apiKey - 1);\n                    navigate('/api_details');\n                })\n                }>Prev</div>\n                <div className=\"api_details_button\" onClick={() => navigate('/api_list')}>Back to List</div>\n                <div className={`api_details_button ${apiKey >= 9 ? 'disabled' : ''}`} onClick={(() => {\n                    handleEvent(apiKey + 1);\n                    navigate('/api_details');\n                })\n                }>Next</div>\n            </div>\n        </div>\n    );\n};\n\nexport default APIDetails;\n"],"names":["WebStorageAPI","useEffect","hljs","highlightAll","_jsxs","_Fragment","children","_jsx","className","FetchAPI","ClipboardAPI","FullscreenAPI","GeolocationAPI","LazyLoadAPI","src","alt","loading","PageVisibilityAPI","ResizeObserverAPI","resizeTargetRef","useRef","resizeObserver","ResizeObserver","entries","entry","console","log","contentRect","width","height","current","observe","disconnect","URLAPI","originalURL","setOriginalURL","useState","type","value","onChange","e","target","onClick","handleURLModification","url","URL","searchParams","set","hash","href","VibrationAPI","_ref","apiNames","apiKey","handleEvent","navigate","useNavigate","apiContent","document","getElementById","scrollTo","top","left","behavior","parseInt","FullScreenAPI","concat"],"sourceRoot":""}